{"version":3,"sources":["plugin.js"],"names":[],"mappings":"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","file":"plugin-compiled.js","sourcesContent":["﻿/**\n * @license Copyright (c) 2003-2015, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or http://ckeditor.com/license\n */\n\n'use strict';\n\n( function() {\n\tCKEDITOR.plugins.add( 'filetools', {\n\t\tlang: 'cs,da,de,en,eo,eu,fr,gl,id,it,ko,ku,nb,nl,pl,pt-br,ru,sv,tr,ug,uk,zh,zh-cn', // %REMOVE_LINE_CORE%\n\n\t\tbeforeInit: function( editor ) {\n\t\t\t/**\n\t\t\t * An instance of the {@link CKEDITOR.fileTools.uploadRepository upload repository}.\n\t\t\t * It allows you to create and get {@link CKEDITOR.fileTools.fileLoader file loaders}.\n\t\t\t *\n\t\t\t *\t\tvar loader = editor.uploadRepository.create( file );\n\t\t\t *\t\tloader.loadAndUpload( 'http://foo/bar' );\n\t\t\t *\n\t\t\t * @since 4.5\n\t\t\t * @readonly\n\t\t\t * @property {CKEDITOR.fileTools.uploadRepository} uploadRepository\n\t\t\t * @member CKEDITOR.editor\n\t\t\t */\n\t\t\teditor.uploadRepository = new UploadRepository( editor );\n\n\t\t\t/**\n\t\t\t * Event fired when the {@link CKEDITOR.fileTools.fileLoader file loader} should send XHR. If the event is not\n\t\t\t * {@link CKEDITOR.eventInfo#stop stopped} or {@link CKEDITOR.eventInfo#cancel canceled}, the default request\n\t\t\t * will be sent. To learn more refer to the [Uploading Dropped or Pasted Files](#!/guide/dev_file_upload) article.\n\t\t\t *\n\t\t\t * @since 4.5\n\t\t\t * @event fileUploadRequest\n\t\t\t * @member CKEDITOR.editor\n\t\t\t * @param data\n\t\t\t * @param {CKEDITOR.fileTools.fileLoader} data.fileLoader File loader instance.\n\t\t\t */\n\t\t\teditor.on( 'fileUploadRequest', function( evt ) {\n\t\t\t\tvar fileLoader = evt.data.fileLoader;\n\n\t\t\t\tfileLoader.xhr.open( 'POST', fileLoader.uploadUrl, true );\n\t\t\t}, null, null, 5 );\n\n\t\t\teditor.on( 'fileUploadRequest', function( evt ) {\n\t\t\t\tvar fileLoader = evt.data.fileLoader,\n\t\t\t\t\tformData = new FormData();\n\n\t\t\t\tformData.append( 'upload', fileLoader.file, fileLoader.fileName );\n\t\t\t\tfileLoader.xhr.send( formData );\n\t\t\t}, null, null, 999 );\n\n\t\t\t/**\n\t\t\t * Event fired when the {CKEDITOR.fileTools.fileLoader file upload} response is received and needs to be parsed.\n\t\t\t * If the event is not {@link CKEDITOR.eventInfo#stop stopped} or {@link CKEDITOR.eventInfo#cancel canceled},\n\t\t\t * the default response handler will be used. To learn more refer to the\n\t\t\t * [Uploading Dropped or Pasted Files](#!/guide/dev_file_upload) article.\n\t\t\t *\n\t\t\t * @since 4.5\n\t\t\t * @event fileUploadResponse\n\t\t\t * @member CKEDITOR.editor\n\t\t\t * @param data\n\t\t\t * @param {CKEDITOR.fileTools.fileLoader} data.fileLoader A file loader instance.\n\t\t\t * @param {String} data.message The message from the server. Needs to be set in the listener &mdash; see the example above.\n\t\t\t * @param {String} data.fileName The file name on server. Needs to be set in the listener &mdash; see the example above.\n\t\t\t * @param {String} data.url The URL to the uploaded file. Needs to be set in the listener &mdash; see the example above.\n\t\t\t */\n\t\t\teditor.on( 'fileUploadResponse', function( evt ) {\n\t\t\t\tvar fileLoader = evt.data.fileLoader,\n\t\t\t\t\txhr = fileLoader.xhr,\n\t\t\t\t\tdata = evt.data;\n\n\t\t\t\ttry {\n\t\t\t\t\tvar response = JSON.parse( xhr.responseText );\n\n\t\t\t\t\t// Error message does not need to mean that upload finished unsuccessfully.\n\t\t\t\t\t// It could mean that ex. file name was changes during upload due to naming collision.\n\t\t\t\t\tif ( response.error && response.error.message ) {\n\t\t\t\t\t\tdata.message = response.error.message;\n\t\t\t\t\t}\n\n\t\t\t\t\t// But !uploaded means error.\n\t\t\t\t\tif ( !response.uploaded ) {\n\t\t\t\t\t\tevt.cancel();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdata.fileName = response.fileName;\n\t\t\t\t\t\tdata.url = response.url;\n\t\t\t\t\t}\n\t\t\t\t} catch ( err ) {\n\t\t\t\t\t// Response parsing error.\n\t\t\t\t\tdata.message = fileLoader.lang.filetools.responseError;\n\t\t\t\t\tCKEDITOR.warn( 'filetools-response-error', { responseText: xhr.responseText } );\n\n\t\t\t\t\tevt.cancel();\n\t\t\t\t}\n\t\t\t}, null, null, 999 );\n\t\t}\n\t} );\n\n\t/**\n\t * File loader repository. It allows you to create and get {@link CKEDITOR.fileTools.fileLoader file loaders}.\n\t *\n\t * An instance of the repository is available as the {@link CKEDITOR.editor#uploadRepository}.\n\t *\n\t *\t\tvar loader = editor.uploadRepository.create( file );\n\t *\t\tloader.loadAndUpload( 'http://foo/bar' );\n\t *\n\t * To find more information about handling files see the {@link CKEDITOR.fileTools.fileLoader} class.\n\t *\n\t * @since 4.5\n\t * @class CKEDITOR.fileTools.uploadRepository\n\t * @mixins CKEDITOR.event\n\t * @constructor Creates an instance of the repository.\n\t * @param {CKEDITOR.editor} editor Editor instance. Used only to get the language data.\n\t */\n\tfunction UploadRepository( editor ) {\n\t\tthis.editor = editor;\n\n\t\tthis.loaders = [];\n\t}\n\n\tUploadRepository.prototype = {\n\t\t/**\n\t\t * Creates a {@link CKEDITOR.fileTools.fileLoader file loader} instance with a unique ID.\n\t\t * The instance can be later retrieved from the repository using the {@link #loaders} array.\n\t\t *\n\t\t * Fires the {@link CKEDITOR.fileTools.uploadRepository#instanceCreated instanceCreated} event.\n\t\t *\n\t\t * @param {Blob/String} fileOrData See {@link CKEDITOR.fileTools.fileLoader}.\n\t\t * @param {String} fileName See {@link CKEDITOR.fileTools.fileLoader}.\n\t\t * @returns {CKEDITOR.fileTools.fileLoader} The created file loader instance.\n\t\t */\n\t\tcreate: function( fileOrData, fileName ) {\n\t\t\tvar id = this.loaders.length,\n\t\t\t\tloader = new FileLoader( this.editor, fileOrData, fileName );\n\n\t\t\tloader.id = id;\n\t\t\tthis.loaders[ id ] = loader;\n\n\t\t\tthis.fire( 'instanceCreated', loader );\n\n\t\t\treturn loader;\n\t\t},\n\n\t\t/**\n\t\t * Returns `true` if all loaders finished their jobs.\n\t\t *\n\t\t * @returns {Boolean} `true` if all loaders finished their job, `false` otherwise.\n\t\t */\n\t\tisFinished: function() {\n\t\t\tfor ( var id = 0; id < this.loaders.length; ++id ) {\n\t\t\t\tif ( !this.loaders[ id ].isFinished() ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\t/**\n\t\t * Array of loaders created by the {@link #create} method. Loaders' {@link CKEDITOR.fileTools.fileLoader#id IDs}\n\t\t * are indexes.\n\t\t *\n\t\t * @readonly\n\t\t * @property {CKEDITOR.fileTools.fileLoader[]} loaders\n\t\t */\n\n\t\t/**\n\t\t * Event fired when the {@link CKEDITOR.fileTools.fileLoader file loader} is created.\n\t\t *\n\t\t * @event instanceCreated\n\t\t * @param {CKEDITOR.fileTools.fileLoader} data Created file loader.\n\t\t */\n\t};\n\n\t/**\n\t * The `FileLoader` class is a wrapper which handles two file operations: loading the content of the file stored on\n\t * the user's device into the memory and uploading the file to the server.\n\t *\n\t * There are two possible ways to crate a `FileLoader` instance: with a [Blob](https://developer.mozilla.org/en/docs/Web/API/Blob)\n\t * (e.g. acquired from the {@link CKEDITOR.plugins.clipboard.dataTransfer#getFile} method) or with data as a Base64 string.\n\t * Note that if the constructor gets the data as a Base64 string, there is no need to load the data, the data is already loaded.\n\t *\n\t * The `FileLoader` is created for a single load and upload process so if you abort the process,\n\t * you need to create a new `FileLoader`.\n\t *\n\t * All process parameters are stored in public properties.\n\t *\n\t * `FileLoader` implements events so you can listen to them to react to changes. There are two types of events:\n\t * events to notify the listeners about changes and an event that lets the listeners synchronize with current {@link #status}.\n\t *\n\t * The first group of events contains {@link #event-loading}, {@link #event-loaded}, {@link #event-uploading},\n\t * {@link #event-uploaded}, {@link #event-error} and {@link #event-abort}. These events are called only once,\n\t * when the {@link #status} changes.\n\t *\n\t * The second type is the {@link #event-update} event. It is fired every time the {@link #status} changes, the progress changes\n\t * or the {@link #method-update} method is called. Is is created to synchronize the visual representation of the loader with\n\t * its status. For example if the dialog window shows the upload progress, it should be refreshed on\n\t * the {@link #event-update} listener. Then when the user closes and reopens this dialog, the {@link #method-update} method should\n\t * be called to refresh the progress.\n\t *\n\t * Default request and response formats will work with CKFinder 2.4.3 and above. If you need a custom request\n\t * or response handling you need to overwrite the default behavior using the {@link CKEDITOR.editor#fileUploadRequest} and\n\t * {@link CKEDITOR.editor#fileUploadResponse} events. For more information see their documentation.\n\t *\n\t * To create a `FileLoader` instance, use the {@link CKEDITOR.fileTools.uploadRepository} class.\n\t *\n\t * Here is a simple `FileLoader` usage example:\n\t *\n\t *\t\teditor.on( 'paste', function( evt ) {\n\t *\t\t\tfor ( var i = 0; i < evt.data.dataTransfer.getFilesCount(); i++ ) {\n\t *\t\t\t\tvar file = evt.data.dataTransfer.getFile( i );\n\t *\n\t *\t\t\t\tif ( CKEDITOR.fileTools.isTypeSupported( file, /image\\/png/ ) ) {\n\t *\t\t\t\t\tvar loader = editor.uploadRepository.create( file );\n\t *\n\t *\t\t\t\t\tloader.on( 'update', function() {\n\t *\t\t\t\t\t\tdocument.getElementById( 'uploadProgress' ).innerHTML = loader.status;\n\t *\t\t\t\t\t} );\n\t *\n\t *\t\t\t\t\tloader.on( 'error', function() {\n\t *\t\t\t\t\t\talert( 'Error!' );\n\t *\t\t\t\t\t} );\n\t *\n\t *\t\t\t\t\tloader.loadAndUpload( 'http://upload.url/' );\n\t *\n\t *\t\t\t\t\tevt.data.dataValue += 'loading...'\n\t *\t\t\t\t}\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * Note that `FileLoader` uses the native file API which is supported **since Internet Explorer 10**.\n\t *\n\t * @since 4.5\n\t * @class CKEDITOR.fileTools.fileLoader\n\t * @mixins CKEDITOR.event\n\t * @constructor Creates an instance of the class and sets initial values for all properties.\n\t * @param {CKEDITOR.editor} editor The editor instance. Used only to get language data.\n\t * @param {Blob/String} fileOrData A [blob object](https://developer.mozilla.org/en/docs/Web/API/Blob) or a data\n\t * string encoded with Base64.\n\t * @param {String} [fileName] The file name. If not set and the second parameter is a file, then its name will be used.\n\t * If not set and the second parameter is a Base64 data string, then the file name will be created based on\n\t * the {@link CKEDITOR.config#fileTools_defaultFileName} option.\n\t */\n\tfunction FileLoader( editor, fileOrData, fileName ) {\n\t\tvar mimeParts,\n\t\t\tdefaultFileName = editor.config.fileTools_defaultFileName;\n\n\t\tthis.editor = editor;\n\t\tthis.lang = editor.lang;\n\n\t\tif ( typeof fileOrData === 'string' ) {\n\t\t\t// Data are already loaded from disc.\n\t\t\tthis.data = fileOrData;\n\t\t\tthis.file = dataToFile( this.data );\n\t\t\tthis.total = this.file.size;\n\t\t\tthis.loaded = this.total;\n\t\t} else {\n\t\t\tthis.data = null;\n\t\t\tthis.file = fileOrData;\n\t\t\tthis.total = this.file.size;\n\t\t\tthis.loaded = 0;\n\t\t}\n\n\t\tif ( fileName ) {\n\t\t\tthis.fileName = fileName;\n\t\t} else if ( this.file.name ) {\n\t\t\tthis.fileName = this.file.name;\n\t\t} else {\n\t\t\tmimeParts = this.file.type.split( '/' );\n\n\t\t\tif ( defaultFileName ) {\n\t\t\t\tmimeParts[ 0 ] = defaultFileName;\n\t\t\t}\n\n\t\t\tthis.fileName = mimeParts.join( '.' );\n\t\t}\n\n\t\tthis.uploaded = 0;\n\t\tthis.uploadTotal = null;\n\n\t\tthis.status = 'created';\n\n\t\tthis.abort = function() {\n\t\t\tthis.changeStatus( 'abort' );\n\t\t};\n\t}\n\n\t/**\n\t * The loader status. Possible values:\n\t *\n\t * * `created` &ndash; The loader was created, but neither load nor upload started.\n\t * * `loading` &ndash; The file is being loaded from the user's storage.\n\t * * `loaded` &ndash; The file was loaded, the process is finished.\n\t * * `uploading` &ndash; The file is being uploaded to the server.\n\t * * `uploaded` &ndash; The file was uploaded, the process is finished.\n\t * * `error` &ndash; The process stops because of an error, more details are available in the {@link #message} property.\n\t * * `abort` &ndash; The process was stopped by the user.\n\t *\n\t * @property {String} status\n\t */\n\n\t/**\n\t * String data encoded with Base64. If the `FileLoader` is created with a Base64 string, the `data` is that string.\n\t * If a file was passed to the constructor, the data is `null` until loading is completed.\n\t *\n\t * @readonly\n\t * @property {String} data\n\t */\n\n\t/**\n\t * File object which represents the handled file. This property is set for both constructor options (file or data).\n\t *\n\t * @readonly\n\t * @property {Blob} file\n\t */\n\n\t/**\n\t * The name of the file. If there is no file name, it is created by using the\n\t * {@link CKEDITOR.config#fileTools_defaultFileName} option.\n\t *\n\t * @readonly\n\t * @property {String} fileName\n\t */\n\n\t/**\n\t * The number of loaded bytes. If the `FileLoader` was created with a data string,\n\t * the loaded value equals the {@link #total} value.\n\t *\n\t * @readonly\n\t * @property {Number} loaded\n\t */\n\n\t/**\n\t * The number of uploaded bytes.\n\t *\n\t * @readonly\n\t * @property {Number} uploaded\n\t */\n\n\t/**\n\t * The total file size in bytes.\n\t *\n\t * @readonly\n\t * @property {Number} total\n\t */\n\n\t/**\n\t * The total size of upload data in bytes.\n\t * If the `xhr.upload` object is present, this value will indicate the total size of the request payload, not only the file\n\t * size itself. If the `xhr.upload` object is not available and the real upload size cannot be obtained, this value will\n\t * be equal to {@link #total}. It has a `null` value until the upload size is known.\n\t *\n\t * \t\tloader.on( 'update', function() {\n\t * \t\t\t// Wait till uploadTotal is present.\n\t * \t\t\tif ( loader.uploadTotal ) {\n\t * \t\t\t\tconsole.log( 'uploadTotal: ' + loader.uploadTotal );\n\t * \t\t\t}\n\t * \t\t});\n\t *\n\t * @readonly\n\t * @property {Number} uploadTotal\n\t */\n\n\t/**\n\t * The error message or additional information received from the server.\n\t *\n\t * @readonly\n\t * @property {String} message\n\t */\n\n\t/**\n\t * The URL to the file when it is uploaded or received from the server.\n\t *\n\t * @readonly\n\t * @property {String} url\n\t */\n\n\t/**\n\t * The target of the upload.\n\t *\n\t * @readonly\n\t * @property {String} uploadUrl\n\t */\n\n\t/**\n\t *\n\t * Native `FileReader` reference used to load the file.\n\t *\n\t * @readonly\n\t * @property {FileReader} reader\n\t */\n\n\t/**\n\t * Native `XMLHttpRequest` reference used to upload the file.\n\t *\n\t * @readonly\n\t * @property {XMLHttpRequest} xhr\n\t */\n\n\t/**\n\t * If `FileLoader` was created using {@link CKEDITOR.fileTools.uploadRepository},\n\t * it gets an identifier which is stored in this property.\n\t *\n\t * @readonly\n\t * @property {Number} id\n\t */\n\n\t/**\n\t * Aborts the process.\n\t *\n\t * This method has a different behavior depending on the current {@link #status}.\n\t *\n\t * * If the {@link #status} is `loading` or `uploading`, current operation will be aborted.\n\t * * If the {@link #status} is `created`, `loading` or `uploading`, the {@link #status} will be changed to `abort`\n\t * and the {@link #event-abort} event will be called.\n\t * * If the {@link #status} is `loaded`, `uploaded`, `error` or `abort`, this method will do nothing.\n\t *\n\t * @method abort\n\t */\n\n\tFileLoader.prototype = {\n\t\t/**\n\t\t * Loads a file from the storage on the user's device to the `data` attribute and uploads it to the server.\n\t\t *\n\t\t * The order of {@link #status statuses} for a successful load and upload is:\n\t\t *\n\t\t * * `created`,\n\t\t * * `loading`,\n\t\t * * `uploading`,\n\t\t * * `uploaded`.\n\t\t *\n\t\t * @param {String} url The upload URL.\n\t\t */\n\t\tloadAndUpload: function( url ) {\n\t\t\tvar loader = this;\n\n\t\t\tthis.once( 'loaded', function( evt ) {\n\t\t\t\t// Cancel both 'loaded' and 'update' events,\n\t\t\t\t// because 'loaded' is terminated state.\n\t\t\t\tevt.cancel();\n\n\t\t\t\tloader.once( 'update', function( evt ) {\n\t\t\t\t\tevt.cancel();\n\t\t\t\t}, null, null, 0 );\n\n\t\t\t\t// Start uploading.\n\t\t\t\tloader.upload( url );\n\t\t\t}, null, null, 0 );\n\n\t\t\tthis.load();\n\t\t},\n\n\t\t/**\n\t\t * Loads a file from the storage on the user's device to the `data` attribute.\n\t\t *\n\t\t * The order of the {@link #status statuses} for a successful load is:\n\t\t *\n\t\t * * `created`,\n\t\t * * `loading`,\n\t\t * * `loaded`.\n\t\t */\n\t\tload: function() {\n\t\t\tvar loader = this;\n\n\t\t\tthis.reader = new FileReader();\n\n\t\t\tvar reader = this.reader;\n\n\t\t\tloader.changeStatus( 'loading' );\n\n\t\t\tthis.abort = function() {\n\t\t\t\tloader.reader.abort();\n\t\t\t};\n\n\t\t\treader.onabort = function() {\n\t\t\t\tloader.changeStatus( 'abort' );\n\t\t\t};\n\n\t\t\treader.onerror = function() {\n\t\t\t\tloader.message = loader.lang.filetools.loadError;\n\t\t\t\tloader.changeStatus( 'error' );\n\t\t\t};\n\n\t\t\treader.onprogress = function( evt ) {\n\t\t\t\tloader.loaded = evt.loaded;\n\t\t\t\tloader.update();\n\t\t\t};\n\n\t\t\treader.onload = function() {\n\t\t\t\tloader.loaded = loader.total;\n\t\t\t\tloader.data = reader.result;\n\t\t\t\tloader.changeStatus( 'loaded' );\n\t\t\t};\n\n\t\t\treader.readAsDataURL( this.file );\n\t\t},\n\n\t\t/**\n\t\t * Uploads a file to the server.\n\t\t *\n\t\t * The order of the {@link #status statuses} for a successful upload is:\n\t\t *\n\t\t * * `created`,\n\t\t * * `uploading`,\n\t\t * * `uploaded`.\n\t\t *\n\t\t * @param {String} url The upload URL.\n\t\t */\n\t\tupload: function( url ) {\n\t\t\tif ( !url ) {\n\t\t\t\tthis.message = this.lang.filetools.noUrlError;\n\t\t\t\tthis.changeStatus( 'error' );\n\t\t\t} else {\n\t\t\t\tthis.uploadUrl = url;\n\n\t\t\t\tthis.xhr = new XMLHttpRequest();\n\t\t\t\tthis.attachRequestListeners();\n\n\t\t\t\tif ( this.editor.fire( 'fileUploadRequest', { fileLoader: this } ) ) {\n\t\t\t\t\tthis.changeStatus( 'uploading' );\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Attaches listeners to the XML HTTP request object.\n\t\t *\n\t\t * @private\n\t\t * @param {XMLHttpRequest} xhr XML HTTP request object.\n\t\t */\n\t\tattachRequestListeners: function() {\n\t\t\tvar loader = this,\n\t\t\t\txhr = this.xhr;\n\n\t\t\tloader.abort = function() {\n\t\t\t\txhr.abort();\n\t\t\t};\n\n\t\t\txhr.onerror = onError;\n\t\t\txhr.onabort = onAbort;\n\n\t\t\t// #13533 - When xhr.upload is present attach onprogress, onerror and onabort functions to get actual upload\n\t\t\t// information.\n\t\t\tif ( xhr.upload ) {\n\t\t\t\txhr.upload.onprogress = function( evt ) {\n\t\t\t\t\tif ( evt.lengthComputable ) {\n\t\t\t\t\t\t// Set uploadTotal with correct data.\n\t\t\t\t\t\tif ( !loader.uploadTotal ) {\n\t\t\t\t\t\t\tloader.uploadTotal = evt.total;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tloader.uploaded = evt.loaded;\n\t\t\t\t\t\tloader.update();\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\txhr.upload.onerror = onError;\n\t\t\t\txhr.upload.onabort = onAbort;\n\n\t\t\t} else {\n\t\t\t\t// #13533 - If xhr.upload is not supported - fire update event anyway and set uploadTotal to file size.\n\t\t\t\tloader.uploadTotal = loader.total;\n\t\t\t\tloader.update();\n\t\t\t}\n\n\t\t\txhr.onload = function() {\n\t\t\t\t// #13433 - Call update at the end of the upload. When xhr.upload object is not supported there will be\n\t\t\t\t// no update events fired during the whole process.\n\t\t\t\tloader.update();\n\n\t\t\t\t// #13433 - Check if loader was not aborted during last update.\n\t\t\t\tif ( loader.status == 'abort' ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tloader.uploaded = loader.uploadTotal;\n\n\t\t\t\tif ( xhr.status < 200 || xhr.status > 299 ) {\n\t\t\t\t\tloader.message = loader.lang.filetools[ 'httpError' + xhr.status ];\n\t\t\t\t\tif ( !loader.message ) {\n\t\t\t\t\t\tloader.message = loader.lang.filetools.httpError.replace( '%1', xhr.status );\n\t\t\t\t\t}\n\t\t\t\t\tloader.changeStatus( 'error' );\n\t\t\t\t} else {\n\t\t\t\t\tvar data = {\n\t\t\t\t\t\t\tfileLoader: loader\n\t\t\t\t\t\t},\n\t\t\t\t\t\t// Values to copy from event to FileLoader.\n\t\t\t\t\t\tvaluesToCopy = [ 'message', 'fileName', 'url' ],\n\t\t\t\t\t\tsuccess = loader.editor.fire( 'fileUploadResponse', data );\n\n\t\t\t\t\tfor ( var i = 0; i < valuesToCopy.length; i++ ) {\n\t\t\t\t\t\tvar key = valuesToCopy[ i ];\n\t\t\t\t\t\tif ( typeof data[ key ] === 'string' ) {\n\t\t\t\t\t\t\tloader[ key ] = data[ key ];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( success === false ) {\n\t\t\t\t\t\tloader.changeStatus( 'error' );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tloader.changeStatus( 'uploaded' );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tfunction onError() {\n\t\t\t\t// Prevent changing status twice, when HHR.error and XHR.upload.onerror could be called together.\n\t\t\t\tif ( loader.status == 'error' ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tloader.message = loader.lang.filetools.networkError;\n\t\t\t\tloader.changeStatus( 'error' );\n\t\t\t}\n\n\t\t\tfunction onAbort() {\n\t\t\t\t// Prevent changing status twice, when HHR.onabort and XHR.upload.onabort could be called together.\n\t\t\t\tif ( loader.status == 'abort' ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tloader.changeStatus( 'abort' );\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Changes {@link #status} to the new status, updates the {@link #method-abort} method if needed and fires two events:\n\t\t * new status and {@link #event-update}.\n\t\t *\n\t\t * @private\n\t\t * @param {String} newStatus New status to be set.\n\t\t */\n\t\tchangeStatus: function( newStatus ) {\n\t\t\tthis.status = newStatus;\n\n\t\t\tif ( newStatus == 'error' || newStatus == 'abort' ||\n\t\t\t\tnewStatus == 'loaded' || newStatus == 'uploaded' ) {\n\t\t\t\tthis.abort = function() {};\n\t\t\t}\n\n\t\t\tthis.fire( newStatus );\n\t\t\tthis.update();\n\t\t},\n\n\t\t/**\n\t\t * Updates the state of the `FileLoader` listeners. This method should be called if the state of the visual representation\n\t\t * of the upload process is out of synchronization and needs to be refreshed (e.g. because of an undo operation or\n\t\t * because the dialog window with the upload is closed and reopened). Fires the {@link #event-update} event.\n\t\t */\n\t\tupdate: function() {\n\t\t\tthis.fire( 'update' );\n\t\t},\n\n\t\t/**\n\t\t * Returns `true` if the loading and uploading finished (successfully or not), so the {@link #status} is\n\t\t * `loaded`, `uploaded`, `error` or `abort`.\n\t\t *\n\t\t * @returns {Boolean} `true` if the loading and uploading finished.\n\t\t */\n\t\tisFinished: function() {\n\t\t\treturn !!this.status.match( /^(?:loaded|uploaded|error|abort)$/ );\n\t\t}\n\n\t\t/**\n\t\t * Event fired when the {@link #status} changes to `loading`. It will be fired once for the `FileLoader`.\n\t\t *\n\t\t * @event loading\n\t\t */\n\n\t\t/**\n\t\t * Event fired when the {@link #status} changes to `loaded`. It will be fired once for the `FileLoader`.\n\t\t *\n\t\t * @event loaded\n\t\t */\n\n\t\t/**\n\t\t * Event fired when the {@link #status} changes to `uploading`. It will be fired once for the `FileLoader`.\n\t\t *\n\t\t * @event uploading\n\t\t */\n\n\t\t/**\n\t\t * Event fired when the {@link #status} changes to `uploaded`. It will be fired once for the `FileLoader`.\n\t\t *\n\t\t * @event uploaded\n\t\t */\n\n\t\t/**\n\t\t * Event fired when the {@link #status} changes to `error`. It will be fired once for the `FileLoader`.\n\t\t *\n\t\t * @event error\n\t\t */\n\n\t\t/**\n\t\t * Event fired when the {@link #status} changes to `abort`. It will be fired once for the `FileLoader`.\n\t\t *\n\t\t * @event abort\n\t\t */\n\n\t\t/**\n\t\t * Event fired every time the `FileLoader` {@link #status} or progress changes or the {@link #method-update} method is called.\n\t\t * This event was designed to allow showing the visualization of the progress and refresh that visualization\n\t\t * every time the status changes. Note that multiple `update` events may be fired with the same status.\n\t\t *\n\t\t * @event update\n\t\t */\n\t};\n\n\tCKEDITOR.event.implementOn( UploadRepository.prototype );\n\tCKEDITOR.event.implementOn( FileLoader.prototype );\n\n\tvar base64HeaderRegExp = /^data:(\\S*?);base64,/;\n\n\t// Transforms Base64 string data into file and creates name for that file based on the mime type.\n\t//\n\t// @private\n\t// @param {String} data Base64 string data.\n\t// @returns {Blob} File.\n\tfunction dataToFile( data ) {\n\t\tvar contentType = data.match( base64HeaderRegExp )[ 1 ],\n\t\t\tbase64Data = data.replace( base64HeaderRegExp, '' ),\n\t\t\tbyteCharacters = atob( base64Data ),\n\t\t\tbyteArrays = [],\n\t\t\tsliceSize = 512,\n\t\t\toffset, slice, byteNumbers, i, byteArray;\n\n\t\tfor ( offset = 0; offset < byteCharacters.length; offset += sliceSize ) {\n\t\t\tslice = byteCharacters.slice( offset, offset + sliceSize );\n\n\t\t\tbyteNumbers = new Array( slice.length );\n\t\t\tfor ( i = 0; i < slice.length; i++ ) {\n\t\t\t\tbyteNumbers[ i ] = slice.charCodeAt( i );\n\t\t\t}\n\n\t\t\tbyteArray = new Uint8Array( byteNumbers );\n\n\t\t\tbyteArrays.push( byteArray );\n\t\t}\n\n\t\treturn new Blob( byteArrays, { type: contentType } );\n\t}\n\n\t//\n\t// PUBLIC API -------------------------------------------------------------\n\t//\n\n\t// Two plugins extend this object.\n\tif ( !CKEDITOR.fileTools ) {\n\t\t/**\n\t\t * Helpers to load and upload a file.\n\t\t *\n\t\t * @since 4.5\n\t\t * @singleton\n\t\t * @class CKEDITOR.fileTools\n\t\t */\n\t\tCKEDITOR.fileTools = {};\n\t}\n\n\tCKEDITOR.tools.extend( CKEDITOR.fileTools, {\n\t\tuploadRepository: UploadRepository,\n\t\tfileLoader: FileLoader,\n\n\t\t/**\n\t\t * Gets the upload URL from the {@link CKEDITOR.config configuration}. Because of backward compatibility\n\t\t * the URL can be set using multiple configuration options.\n\t\t *\n\t\t * If the `type` is defined, then four configuration options will be checked in the following order\n\t\t * (examples for `type='image'`):\n\t\t *\n\t\t * * `[type]UploadUrl`, e.g. {@link CKEDITOR.config#imageUploadUrl},\n\t\t * * {@link CKEDITOR.config#uploadUrl},\n\t\t * * `filebrowser[uppercased type]uploadUrl`, e.g. {@link CKEDITOR.config#filebrowserImageUploadUrl},\n\t\t * * {@link CKEDITOR.config#filebrowserUploadUrl}.\n\t\t *\n\t\t * If the `type` is not defined, two configuration options will be checked:\n\t\t *\n\t\t * * {@link CKEDITOR.config#uploadUrl},\n\t\t * * {@link CKEDITOR.config#filebrowserUploadUrl}.\n\t\t *\n\t\t * `filebrowser[type]uploadUrl` and `filebrowserUploadUrl` are checked for backward compatibility with the\n\t\t * `filebrowser` plugin.\n\t\t *\n\t\t * For both `filebrowser[type]uploadUrl` and `filebrowserUploadUrl` `&responseType=json` is added to the end of the URL.\n\t\t *\n\t\t * @param {Object} config The configuration file.\n\t\t * @param {String} [type] Upload file type.\n\t\t * @returns {String/null} Upload URL or `null` if none of the configuration options were defined.\n\t\t */\n\t\tgetUploadUrl: function( config, type ) {\n\t\t\tvar capitalize = CKEDITOR.tools.capitalize;\n\n\t\t\tif ( type && config[ type + 'UploadUrl' ] ) {\n\t\t\t\treturn config[ type + 'UploadUrl' ];\n\t\t\t} else if ( config.uploadUrl ) {\n\t\t\t\treturn config.uploadUrl;\n\t\t\t} else if ( type && config[ 'filebrowser' + capitalize( type, 1 ) + 'UploadUrl' ] ) {\n\t\t\t\treturn config[ 'filebrowser' + capitalize( type, 1 ) + 'UploadUrl' ] + '&responseType=json';\n\t\t\t} else if ( config.filebrowserUploadUrl ) {\n\t\t\t\treturn config.filebrowserUploadUrl + '&responseType=json';\n\t\t\t}\n\n\t\t\treturn null;\n\t\t},\n\n\t\t/**\n\t\t * Checks if the MIME type of the given file is supported.\n\t\t *\n\t\t * \t\tCKEDITOR.fileTools.isTypeSupported( { type: 'image/png' }, /image\\/(png|jpeg)/ ); // true\n\t\t * \t\tCKEDITOR.fileTools.isTypeSupported( { type: 'image/png' }, /image\\/(gif|jpeg)/ ); // false\n\t\t *\n\t\t * @param {Blob} file The file to check.\n\t\t * @param {RegExp} supportedTypes A regular expression to check the MIME type of the file.\n\t\t * @returns {Boolean} `true` if the file type is supported.\n\t\t */\n\t\tisTypeSupported: function( file, supportedTypes ) {\n\t\t\treturn !!file.type.match( supportedTypes );\n\t\t}\n\t} );\n} )();\n\n/**\n * The URL where files should be uploaded.\n *\n * An empty string means that the option is disabled.\n *\n * @since 4.5\n * @cfg {String} [uploadUrl='']\n * @member CKEDITOR.config\n */\n\n/**\n * Default file name (without extension) that will be used for files created from a Base64 data string\n * (for example for files pasted into the editor).\n * This name will be combined with the MIME type to create the full file name with the extension.\n *\n * If `fileTools_defaultFileName` is set to `default-name` and data's MIME type is `image/png`,\n * the resulting file name will be `default-name.png`.\n *\n * If `fileTools_defaultFileName` is not set, the file name will be created using only its MIME type.\n * For example for `image/png` the file name will be `image.png`.\n *\n * @since 4.5.3\n * @cfg {String} [fileTools_defaultFileName='']\n * @member CKEDITOR.config\n */\n"]}