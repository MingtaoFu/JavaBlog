{"version":3,"sources":["plugin.js"],"names":[],"mappings":"AAAA;;;AAAY,CAAC;AAGb,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAE,WAAW,EAAE;;AAElC,SAAQ,EAAE,QAAQ;;;;AAIlB,MAAK,EAAE,WAAW;;;AAGlB,KAAI,EAAE,UAAU,MAAM,EAAG;;AAExB,UAAQ,CAAC,MAAM,CAAC,GAAG,CAAE,WAAW,EAAE,IAAI,CAAC,IAAI,GAAG,sBAAsB,CAAE;;;AAAC,AAGvE,QAAM,CAAC,OAAO,CAAC,GAAG,CAAE,WAAW,EAAE;;;;;AAKhC,iBAAc,EACb,6DAA6D,GAC7D,+CAA+C;;;AAGhD,kBAAe,EAAE,gBAAgB;;;AAGjC,YAAS,EAAE;AACV,SAAK,EAAE;;AAEN,aAAQ,EAAE,kBAAkB;;;;AAI5B,mBAAc,EAAE,cAAc;KAC9B;AACD,WAAO,EAAE;AACR,aAAQ,EAAE,oBAAoB;KAC9B;IACD;;;;AAID,WAAQ,EACP,yBAAyB,GACxB,wCAAwC,GACxC,wDAAwD,GACzD,QAAQ;;;;;;;;;AAST,SAAM,EAAE,qBAAqB;;;;AAI7B,SAAM,EAAE,WAAW;;;;;;;AAOnB,SAAM,EAAE,UAAU,OAAO,EAAG;;;AAG3B,WAAO,OAAO,CAAC,IAAI,IAAI,KAAK,IAAI,OAAO,CAAC,QAAQ,CAAE,WAAW,CAAE,CAAC;IAChE;;;;;AAKD,OAAI,EAAE,YAAW;AAChB,QAAI,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAE,OAAO,CAAE,CAAC;AAC7C,QAAK,KAAK,EACT,IAAI,CAAC,OAAO,CAAE,OAAO,EAAE,KAAK,CAAE,CAAC;;AAEhC,QAAK,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAE,YAAY,CAAE,EACzC,IAAI,CAAC,OAAO,CAAE,OAAO,EAAE,MAAM,CAAE,CAAC;AACjC,QAAK,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAE,aAAa,CAAE,EAC1C,IAAI,CAAC,OAAO,CAAE,OAAO,EAAE,OAAO,CAAE,CAAC;AAClC,QAAK,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAE,cAAc,CAAE,EAC3C,IAAI,CAAC,OAAO,CAAE,OAAO,EAAE,QAAQ,CAAE,CAAC;IACnC;;;;;;AAMD,OAAI,EAAE,YAAW;;;AAGhB,QAAK,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,EACpB,IAAI,CAAC,OAAO,CAAC,WAAW,CAAE,OAAO,CAAE,CAAC,KAEpC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAE,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,CAAE,CAAC;;;AAAA,AAGnD,QAAI,CAAC,OAAO,CAAC,WAAW,CAAE,YAAY,CAAE,CAAC;AACzC,QAAI,CAAC,OAAO,CAAC,WAAW,CAAE,aAAa,CAAE,CAAC;AAC1C,QAAI,CAAC,OAAO,CAAC,WAAW,CAAE,cAAc,CAAE,CAAC;AAC3C,QAAK,IAAI,CAAC,IAAI,CAAC,KAAK,EACnB,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAE,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAE,CAAC;IACrD;GACD,CAAE,CAAC;EACJ;CACD,CAAE,CAAC","file":"plugin-compiled.js","sourcesContent":["'use strict';\n\n// Register the plugin within the editor.\nCKEDITOR.plugins.add( 'simplebox', {\n\t// This plugin requires the Widgets System defined in the 'widget' plugin.\n\trequires: 'widget',\n\n\t// Register the icon used for the toolbar button. It must be the same\n\t// as the name of the widget.\n\ticons: 'simplebox',\n\n\t// The plugin initialization logic goes inside this method.\n\tinit: function( editor ) {\n\t\t// Register the editing dialog.\n\t\tCKEDITOR.dialog.add( 'simplebox', this.path + 'dialogs/simplebox.js' );\n\n\t\t// Register the simplebox widget.\n\t\teditor.widgets.add( 'simplebox', {\n\t\t\t// Allow all HTML elements, classes, and styles that this widget requires.\n\t\t\t// Read more about the Advanced Content Filter here:\n\t\t\t// * http://docs.ckeditor.com/#!/guide/dev_advanced_content_filter\n\t\t\t// * http://docs.ckeditor.com/#!/guide/plugin_sdk_integration_with_acf\n\t\t\tallowedContent:\n\t\t\t\t'div(!simplebox,align-left,align-right,align-center){width};' +\n\t\t\t\t'div(!simplebox-content); h2(!simplebox-title)',\n\n\t\t\t// Minimum HTML which is required by this widget to work.\n\t\t\trequiredContent: 'div(simplebox)',\n\n\t\t\t// Define two nested editable areas.\n\t\t\teditables: {\n\t\t\t\ttitle: {\n\t\t\t\t\t// Define CSS selector used for finding the element inside widget element.\n\t\t\t\t\tselector: '.simplebox-title',\n\t\t\t\t\t// Define content allowed in this nested editable. Its content will be\n\t\t\t\t\t// filtered accordingly and the toolbar will be adjusted when this editable\n\t\t\t\t\t// is focused.\n\t\t\t\t\tallowedContent: 'br strong em'\n\t\t\t\t},\n\t\t\t\tcontent: {\n\t\t\t\t\tselector: '.simplebox-content'\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// Define the template of a new Simple Box widget.\n\t\t\t// The template will be used when creating new instances of the Simple Box widget.\n\t\t\ttemplate:\n\t\t\t\t'<div class=\"simplebox\">' +\n\t\t\t\t\t'<h2 class=\"simplebox-title\">Title</h2>' +\n\t\t\t\t\t'<div class=\"simplebox-content\"><p>Content...</p></div>' +\n\t\t\t\t'</div>',\n\n\t\t\t// Define the label for a widget toolbar button which will be automatically\n\t\t\t// created by the Widgets System. This button will insert a new widget instance\n\t\t\t// created from the template defined above, or will edit selected widget\n\t\t\t// (see second part of this tutorial to learn about editing widgets).\n\t\t\t//\n\t\t\t// Note: In order to be able to translate your widget you should use the\n\t\t\t// editor.lang.simplebox.* property. A string was used directly here to simplify this tutorial.\n\t\t\tbutton: 'Create a simple box',\n\n\t\t\t// Set the widget dialog window name. This enables the automatic widget-dialog binding.\n\t\t\t// This dialog window will be opened when creating a new widget or editing an existing one.\n\t\t\tdialog: 'simplebox',\n\n\t\t\t// Check the elements that need to be converted to widgets.\n\t\t\t//\n\t\t\t// Note: The \"element\" argument is an instance of http://docs.ckeditor.com/#!/api/CKEDITOR.htmlParser.element\n\t\t\t// so it is not a real DOM element yet. This is caused by the fact that upcasting is performed\n\t\t\t// during data processing which is done on DOM represented by JavaScript objects.\n\t\t\tupcast: function( element ) {\n\t\t\t\t// Return \"true\" (that element needs to converted to a Simple Box widget)\n\t\t\t\t// for all <div> elements with a \"simplebox\" class.\n\t\t\t\treturn element.name == 'div' && element.hasClass( 'simplebox' );\n\t\t\t},\n\n\t\t\t// When a widget is being initialized, we need to read the data (\"align\" and \"width\")\n\t\t\t// from DOM and set it by using the widget.setData() method.\n\t\t\t// More code which needs to be executed when DOM is available may go here.\n\t\t\tinit: function() {\n\t\t\t\tvar width = this.element.getStyle( 'width' );\n\t\t\t\tif ( width )\n\t\t\t\t\tthis.setData( 'width', width );\n\n\t\t\t\tif ( this.element.hasClass( 'align-left' ) )\n\t\t\t\t\tthis.setData( 'align', 'left' );\n\t\t\t\tif ( this.element.hasClass( 'align-right' ) )\n\t\t\t\t\tthis.setData( 'align', 'right' );\n\t\t\t\tif ( this.element.hasClass( 'align-center' ) )\n\t\t\t\t\tthis.setData( 'align', 'center' );\n\t\t\t},\n\n\t\t\t// Listen on the widget#data event which is fired every time the widget data changes\n\t\t\t// and updates the widget's view.\n\t\t\t// Data may be changed by using the widget.setData() method, which we use in the\n\t\t\t// Simple Box dialog window.\n\t\t\tdata: function() {\n\t\t\t\t// Check whether \"width\" widget data is set and remove or set \"width\" CSS style.\n\t\t\t\t// The style is set on widget main element (div.simplebox).\n\t\t\t\tif ( !this.data.width )\n\t\t\t\t\tthis.element.removeStyle( 'width' );\n\t\t\t\telse\n\t\t\t\t\tthis.element.setStyle( 'width', this.data.width );\n\n\t\t\t\t// Brutally remove all align classes and set a new one if \"align\" widget data is set.\n\t\t\t\tthis.element.removeClass( 'align-left' );\n\t\t\t\tthis.element.removeClass( 'align-right' );\n\t\t\t\tthis.element.removeClass( 'align-center' );\n\t\t\t\tif ( this.data.align )\n\t\t\t\t\tthis.element.addClass( 'align-' + this.data.align );\n\t\t\t}\n\t\t} );\n\t}\n} );\n"]}