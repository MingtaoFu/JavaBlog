{"version":3,"sources":["plugin.js"],"names":[],"mappings":"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","file":"plugin-compiled.js","sourcesContent":["ï»¿/**\n * @license Copyright (c) 2003-2015, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or http://ckeditor.com/license\n */\n\n'use strict';\n\n( function() {\n\tCKEDITOR.plugins.add( 'uploadwidget', {\n\t\tlang: 'cs,da,de,en,eo,eu,fr,gl,hu,id,it,ko,ku,nb,nl,pl,pt-br,ru,sv,tr,ug,uk,zh,zh-cn', // %REMOVE_LINE_CORE%\n\t\trequires: 'widget,clipboard,filetools,notificationaggregator',\n\n\t\tinit: function( editor ) {\n\t\t\t// Images which should be changed into upload widget needs to be marked with `data-widget` on paste,\n\t\t\t// because otherwise wrong widget may handle upload placeholder element (e.g. image2 plugin would handle image).\n\t\t\t// `data-widget` attribute is allowed only in the elements which has also `data-cke-upload-id` attribute.\n\t\t\teditor.filter.allow( '*[!data-widget,!data-cke-upload-id]' );\n\t\t}\n\t} );\n\n\t/**\n\t * This function creates an upload widget &mdash; a placeholder to show the progress of an upload. The upload widget\n\t * is based on its {@link CKEDITOR.fileTools.uploadWidgetDefinition definition}. The `addUploadWidget` method also\n\t * creates a `paste` event, if the {@link CKEDITOR.fileTools.uploadWidgetDefinition#fileToElement fileToElement} method\n\t * is defined. This event helps in handling pasted files, as it will automatically check if the files were pasted and\n\t * mark them to be uploaded.\n\t *\n\t * The upload widget helps to handle content that is uploaded asynchronously inside the editor. It solves issues such as:\n\t * editing during upload, undo manager integration, getting data, removing or copying uploaded element.\n\t *\n\t * To create an upload widget you need to define two transformation methods:\n\t *\n\t * * The {@link CKEDITOR.fileTools.uploadWidgetDefinition#fileToElement fileToElement} method which will be called on\n\t * `paste` and transform a file into a placeholder.\n\t * * The {@link CKEDITOR.fileTools.uploadWidgetDefinition#onUploaded onUploaded} method with\n\t * the {@link CKEDITOR.fileTools.uploadWidgetDefinition#replaceWith replaceWith} method which will be called to replace\n\t * the upload placeholder with the final HTML when the upload is done.\n\t * If you want to show more information about the progress you can also define\n\t * the {@link CKEDITOR.fileTools.uploadWidgetDefinition#onLoading onLoading} and\n\t * {@link CKEDITOR.fileTools.uploadWidgetDefinition#onUploading onUploading} methods.\n\t *\n\t * The simplest uploading widget which uploads a file and creates a link to it may look like this:\n\t *\n\t * \t\tCKEDITOR.fileTools.addUploadWidget( editor, 'uploadfile', {\n\t *\t\t\tuploadUrl: CKEDITOR.fileTools.getUploadUrl( editor.config ),\n\t *\n\t *\t\t\tfileToElement: function( file ) {\n\t *\t\t\t\tvar a = new CKEDITOR.dom.element( 'a' );\n\t *\t\t\t\ta.setText( file.name );\n\t *\t\t\t\ta.setAttribute( 'href', '#' );\n\t *\t\t\t\treturn a;\n\t *\t\t\t},\n\t *\n\t *\t\t\tonUploaded: function( upload ) {\n\t *\t\t\t\tthis.replaceWith( '<a href=\"' + upload.url + '\" target=\"_blank\">' + upload.fileName + '</a>' );\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * The upload widget uses {@link CKEDITOR.fileTools.fileLoader} as a helper to upload the file. A\n\t * {@link CKEDITOR.fileTools.fileLoader} instance is created when the file is pasted and a proper method is\n\t * called &mdash; by default it is the {@link CKEDITOR.fileTools.fileLoader#loadAndUpload} method. If you want\n\t * to only use the `load` or `upload`, you can use the {@link CKEDITOR.fileTools.uploadWidgetDefinition#loadMethod loadMethod}\n\t * property.\n\t *\n\t * Note that if you want to handle a big file, e.g. a video, you may need to use `upload` instead of\n\t * `loadAndUpload` because the file may be too big to load it to memory at once.\n\t *\n\t * If you do not upload the file, you need to define {@link CKEDITOR.fileTools.uploadWidgetDefinition#onLoaded onLoaded}\n\t * instead of {@link CKEDITOR.fileTools.uploadWidgetDefinition#onUploaded onUploaded}.\n\t * For example, if you want to read the content of the file:\n\t *\n\t *\t\tCKEDITOR.fileTools.addUploadWidget( editor, 'fileReader', {\n\t *\t\t\tloadMethod: 'load',\n\t *\t\t\tsupportedTypes: /text\\/(plain|html)/,\n\t *\n\t *\t\t\tfileToElement: function( file ) {\n\t *\t\t\t\tvar el = new CKEDITOR.dom.element( 'span' );\n\t *\t\t\t\tel.setText( '...' );\n\t *\t\t\t\treturn el;\n\t *\t\t\t},\n\t *\n\t *\t\t\tonLoaded: function( loader ) {\n\t *\t\t\t\tthis.replaceWith( atob( loader.data.split( ',' )[ 1 ] ) );\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * If you need custom `paste` handling you need to mark the pasted element to be changed into an upload widget\n\t * using {@link CKEDITOR.fileTools#markElement markElement}. For example, instead of the `fileToElement` helper from the\n\t * example above, a `paste` listener can be created manually:\n\t *\n\t *\t\teditor.on( 'paste', function( evt ) {\n\t *\t\t\tvar file, i, el, loader;\n\t *\n\t *\t\t\tfor ( i = 0; i < evt.data.dataTransfer.getFilesCount(); i++ ) {\n\t *\t\t\t\tfile = evt.data.dataTransfer.getFile( i );\n\t *\n\t *\t\t\t\tif ( CKEDITOR.fileTools.isTypeSupported( file, /text\\/(plain|html)/ ) ) {\n\t *\t\t\t\t\tel = new CKEDITOR.dom.element( 'span' ),\n\t *\t\t\t\t\tloader = editor.uploadRepository.create( file );\n\t *\n\t *\t\t\t\t\tel.setText( '...' );\n\t *\n\t *\t\t\t\t\tloader.load();\n\t *\n\t *\t\t\t\t\tCKEDITOR.fileTools.markElement( el, 'filereader', loader.id );\n\t *\n\t *\t\t\t\t\tevt.data.dataValue += el.getOuterHtml();\n\t *\t\t\t\t}\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * Note that you can bind notifications to the upload widget on paste using\n\t * the {@link CKEDITOR.fileTools#bindNotifications} method, so notifications will automatically\n\t * show the progress of the upload. Because this method shows notifications about upload, do not use it if you only\n\t * {@link CKEDITOR.fileTools.fileLoader#load load} (and not upload) a file.\n\t *\n\t *\t\teditor.on( 'paste', function( evt ) {\n\t *\t\t\tvar file, i, el, loader;\n\t *\n\t *\t\t\tfor ( i = 0; i < evt.data.dataTransfer.getFilesCount(); i++ ) {\n\t *\t\t\t\tfile = evt.data.dataTransfer.getFile( i );\n\t *\n\t *\t\t\t\tif ( CKEDITOR.fileTools.isTypeSupported( file, /text\\/pdf/ ) ) {\n\t *\t\t\t\t\tel = new CKEDITOR.dom.element( 'span' ),\n\t *\t\t\t\t\tloader = editor.uploadRepository.create( file );\n\t *\n\t *\t\t\t\t\tel.setText( '...' );\n\t *\n\t *\t\t\t\t\tloader.upload();\n\t *\n\t *\t\t\t\t\tCKEDITOR.fileTools.markElement( el, 'pdfuploader', loader.id );\n\t *\n\t *\t\t\t\t\tCKEDITOR.fileTools.bindNotifications( editor, loader );\n\t *\n\t *\t\t\t\t\tevt.data.dataValue += el.getOuterHtml();\n\t *\t\t\t\t}\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * @member CKEDITOR.fileTools\n\t * @param {CKEDITOR.editor} editor The editor instance.\n\t * @param {String} name The name of the upload widget.\n\t * @param {CKEDITOR.fileTools.uploadWidgetDefinition} def Upload widget definition.\n\t */\n\tfunction addUploadWidget( editor, name, def ) {\n\t\tvar fileTools = CKEDITOR.fileTools,\n\t\t\tuploads = editor.uploadRepository,\n\t\t\t// Plugins which support all file type has lower priority than plugins which support specific types.\n\t\t\tpriority = def.supportedTypes ? 10 : 20;\n\n\t\tif ( def.fileToElement ) {\n\t\t\teditor.on( 'paste', function( evt ) {\n\t\t\t\tvar data = evt.data,\n\t\t\t\t\tdataTransfer = data.dataTransfer,\n\t\t\t\t\tfilesCount = dataTransfer.getFilesCount(),\n\t\t\t\t\tloadMethod = def.loadMethod || 'loadAndUpload',\n\t\t\t\t\tfile, i;\n\n\t\t\t\tif ( data.dataValue || !filesCount ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tfor ( i = 0; i < filesCount; i++ ) {\n\t\t\t\t\tfile = dataTransfer.getFile( i );\n\n\t\t\t\t\t// No def.supportedTypes means all types are supported.\n\t\t\t\t\tif ( !def.supportedTypes || fileTools.isTypeSupported( file, def.supportedTypes ) ) {\n\t\t\t\t\t\tvar el = def.fileToElement( file ),\n\t\t\t\t\t\t\tloader = uploads.create( file );\n\n\t\t\t\t\t\tif ( el ) {\n\t\t\t\t\t\t\tloader[ loadMethod ]( def.uploadUrl );\n\n\t\t\t\t\t\t\tCKEDITOR.fileTools.markElement( el, name, loader.id );\n\n\t\t\t\t\t\t\tif ( loadMethod == 'loadAndUpload' || loadMethod == 'upload' ) {\n\t\t\t\t\t\t\t\tCKEDITOR.fileTools.bindNotifications( editor, loader );\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tdata.dataValue += el.getOuterHtml();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}, null, null, priority );\n\t\t}\n\n\t\t/**\n\t\t * This is an abstract class that describes a definition of an upload widget.\n\t\t * It is a type of {@link CKEDITOR.fileTools#addUploadWidget} method's second argument.\n\t\t *\n\t\t * Note that because the upload widget is a type of a widget, this definition extends\n\t\t * {@link CKEDITOR.plugins.widget.definition}.\n\t\t * It adds several new properties and callbacks and implements the {@link CKEDITOR.plugins.widget.definition#downcast}\n\t\t * and {@link CKEDITOR.plugins.widget.definition#init} callbacks. These two properties\n\t\t * should not be overwritten.\n\t\t *\n\t\t * Also, the upload widget definition defines a few properties ({@link #fileToElement}, {@link #supportedTypes},\n\t\t * {@link #loadMethod loadMethod} and {@link #uploadUrl}) used in the {@link CKEDITOR.editor#paste} listener\n\t\t * which is registered by {@link CKEDITOR.fileTools#addUploadWidget} if the upload widget definition contains\n\t\t * the {@link #fileToElement} callback.\n\t\t *\n\t\t * @abstract\n\t\t * @class CKEDITOR.fileTools.uploadWidgetDefinition\n\t\t * @mixins CKEDITOR.plugins.widget.definition\n\t\t */\n\t\tCKEDITOR.tools.extend( def, {\n\t\t\t/**\n\t\t\t * Upload widget definition overwrites the {@link CKEDITOR.plugins.widget.definition#downcast} property.\n\t\t\t * This should not be changed.\n\t\t\t *\n\t\t\t * @property {String/Function}\n\t\t\t */\n\t\t\tdowncast: function() {\n\t\t\t\treturn new CKEDITOR.htmlParser.text( '' );\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Upload widget definition overwrites the {@link CKEDITOR.plugins.widget.definition#init} property.\n\t\t\t * If you want to add some code in the `init` callback remember to call the base function.\n\t\t\t *\n\t\t\t * @property {Function}\n\t\t\t */\n\t\t\tinit: function() {\n\t\t\t\tvar widget = this,\n\t\t\t\t\tid = this.wrapper.findOne( '[data-cke-upload-id]' ).data( 'cke-upload-id' ),\n\t\t\t\t\tloader = uploads.loaders[ id ],\n\t\t\t\t\tcapitalize = CKEDITOR.tools.capitalize,\n\t\t\t\t\toldStyle, newStyle;\n\n\t\t\t\tloader.on( 'update', function( evt ) {\n\t\t\t\t\t// Abort if widget was removed.\n\t\t\t\t\tif ( !widget.wrapper || !widget.wrapper.getParent() ) {\n\t\t\t\t\t\tif ( !editor.editable().find( '[data-cke-upload-id=\"' + id + '\"]' ).count() ) {\n\t\t\t\t\t\t\tloader.abort();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tevt.removeListener();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\teditor.fire( 'lockSnapshot' );\n\n\t\t\t\t\t// Call users method, eg. if the status is `uploaded` then\n\t\t\t\t\t// `onUploaded` method will be called, if exists.\n\t\t\t\t\tvar methodName = 'on' + capitalize( loader.status );\n\n\t\t\t\t\tif ( typeof widget[ methodName ] === 'function' ) {\n\t\t\t\t\t\tif ( widget[ methodName ]( loader ) === false ) {\n\t\t\t\t\t\t\teditor.fire( 'unlockSnapshot' );\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Set style to the wrapper if it still exists.\n\t\t\t\t\tnewStyle = 'cke_upload_' + loader.status;\n\t\t\t\t\tif ( widget.wrapper && newStyle != oldStyle ) {\n\t\t\t\t\t\toldStyle && widget.wrapper.removeClass( oldStyle );\n\t\t\t\t\t\twidget.wrapper.addClass( newStyle );\n\t\t\t\t\t\toldStyle = newStyle;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Remove widget on error or abort.\n\t\t\t\t\tif ( loader.status == 'error' || loader.status == 'abort' ) {\n\t\t\t\t\t\teditor.widgets.del( widget );\n\t\t\t\t\t}\n\n\t\t\t\t\teditor.fire( 'unlockSnapshot' );\n\t\t\t\t} );\n\n\t\t\t\tloader.update();\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Replaces the upload widget with the final HTML. This method should be called when the upload is done,\n\t\t\t * usually in the {@link #onUploaded} callback.\n\t\t\t *\n\t\t\t * @property {Function}\n\t\t\t * @param {String} data HTML to replace the upload widget.\n\t\t\t * @param {String} [mode='html'] See {@link CKEDITOR.editor#method-insertHtml}'s modes.\n\t\t\t */\n\t\t\treplaceWith: function( data, mode ) {\n\t\t\t\tif ( data.trim() === '' ) {\n\t\t\t\t\teditor.widgets.del( this );\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar wasSelected = ( this == editor.widgets.focused ),\n\t\t\t\t\teditable = editor.editable(),\n\t\t\t\t\trange = editor.createRange(),\n\t\t\t\t\tbookmark, bookmarks;\n\n\t\t\t\tif ( !wasSelected ) {\n\t\t\t\t\tbookmarks = editor.getSelection().createBookmarks();\n\t\t\t\t}\n\n\t\t\t\trange.setStartBefore( this.wrapper );\n\t\t\t\trange.setEndAfter( this.wrapper );\n\n\t\t\t\tif ( wasSelected ) {\n\t\t\t\t\tbookmark = range.createBookmark();\n\t\t\t\t}\n\n\t\t\t\teditable.insertHtmlIntoRange( data, range, mode );\n\n\t\t\t\teditor.widgets.checkWidgets( { initOnlyNew: true } );\n\n\t\t\t\t// Ensure that old widgets instance will be removed.\n\t\t\t\t// If replaceWith is called in init, because of paste then checkWidgets will not remove it.\n\t\t\t\teditor.widgets.destroy( this, true );\n\n\t\t\t\tif ( wasSelected ) {\n\t\t\t\t\trange.moveToBookmark( bookmark );\n\t\t\t\t\trange.select();\n\t\t\t\t} else {\n\t\t\t\t\teditor.getSelection().selectBookmarks( bookmarks );\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * If this property is defined, paste listener is created to transform the pasted file into an HTML element.\n\t\t\t * It creates an HTML element which will be then transformed into an upload widget.\n\t\t\t * It is only called for {@link #supportedTypes supported files}.\n\t\t\t * If multiple files were pasted, this function will be called for each file of a supported type.\n\t\t\t *\n\t\t\t * @property {Function} fileToElement\n\t\t\t * @param {Blob} file A pasted file to load or upload.\n\t\t\t * @returns {CKEDITOR.dom.element} An element which will be transformed into the upload widget.\n\t\t\t */\n\n\t\t\t/**\n\t\t\t * Regular expression to check if the file type is supported by this widget.\n\t\t\t * If not defined, all files will be handled.\n\t\t\t *\n\t\t\t * @property {String} [supportedTypes]\n\t\t\t */\n\n\t\t\t/**\n\t\t\t * The URL to which the file will be uploaded. It should be taken from the configuration using\n\t\t\t * {@link CKEDITOR.fileTools#getUploadUrl}.\n\t\t\t *\n\t\t\t * @property {String} [uploadUrl]\n\t\t\t */\n\n\t\t\t/**\n\t\t\t * The type of loading operation that should be executed as a result of pasting a file. Possible options are:\n\t\t\t *\n\t\t\t * * 'loadAndUpload' &ndash; Default behavior, the {@link CKEDITOR.fileTools.fileLoader#loadAndUpload} method will be\n\t\t\t * executed, the file will be loaded first and uploaded immediately after loading is done.\n\t\t\t * * 'load' &ndash; The {@link CKEDITOR.fileTools.fileLoader#load} method will be executed. This loading type should\n\t\t\t * be used if you only want to load file data without uploading it.\n\t\t\t * * 'upload' &ndash; The {@link CKEDITOR.fileTools.fileLoader#upload} method will be executed, the file will be uploaded\n\t\t\t * without loading it to memory. This loading type should be used if you want to upload a big file,\n\t\t\t * otherwise you can get an \"out of memory\" error.\n\t\t\t *\n\t\t\t * @property {String} [loadMethod=loadAndUpload]\n\t\t\t */\n\n\t\t\t/**\n\t\t\t * A function called when the {@link CKEDITOR.fileTools.fileLoader#status status} of the upload changes to `loading`.\n\t\t\t *\n\t\t\t * @property {Function} [onLoading]\n\t\t\t * @param {CKEDITOR.fileTools.fileLoader} loader Loader instance.\n\t\t\t * @returns {Boolean}\n\t\t\t */\n\n\t\t\t/**\n\t\t\t * A function called when the {@link CKEDITOR.fileTools.fileLoader#status status} of the upload changes to `loaded`.\n\t\t\t *\n\t\t\t * @property {Function} [onLoaded]\n\t\t\t * @param {CKEDITOR.fileTools.fileLoader} loader Loader instance.\n\t\t\t * @returns {Boolean}\n\t\t\t */\n\n\t\t\t/**\n\t\t\t * A function called when the {@link CKEDITOR.fileTools.fileLoader#status status} of the upload changes to `uploading`.\n\t\t\t *\n\t\t\t * @property {Function} [onUploading]\n\t\t\t * @param {CKEDITOR.fileTools.fileLoader} loader Loader instance.\n\t\t\t * @returns {Boolean}\n\t\t\t */\n\n\t\t\t/**\n\t\t\t * A function called when the {@link CKEDITOR.fileTools.fileLoader#status status} of the upload changes to `uploaded`.\n\t\t\t * At that point the upload is done and the upload widget should be replaced with the final HTML using\n\t\t\t * the {@link #replaceWith} method.\n\t\t\t *\n\t\t\t * @property {Function} [onUploaded]\n\t\t\t * @param {CKEDITOR.fileTools.fileLoader} loader Loader instance.\n\t\t\t * @returns {Boolean}\n\t\t\t */\n\n\t\t\t/**\n\t\t\t * A function called when the {@link CKEDITOR.fileTools.fileLoader#status status} of the upload changes to `error`.\n\t\t\t * The default behavior is to remove the widget and it can be canceled if this function returns `false`.\n\t\t\t *\n\t\t\t * @property {Function} [onError]\n\t\t\t * @param {CKEDITOR.fileTools.fileLoader} loader Loader instance.\n\t\t\t * @returns {Boolean} If `false`, the default behavior (remove widget) will be canceled.\n\t\t\t */\n\n\t\t\t/**\n\t\t\t * A function called when the {@link CKEDITOR.fileTools.fileLoader#status status} of the upload changes to `abort`.\n\t\t\t * The default behavior is to remove the widget and it can be canceled if this function returns `false`.\n\t\t\t *\n\t\t\t * @property {Function} [onAbort]\n\t\t\t * @param {CKEDITOR.fileTools.fileLoader} loader Loader instance.\n\t\t\t * @returns {Boolean} If `false`, the default behavior (remove widget) will be canceled.\n\t\t\t */\n\t\t} );\n\n\t\teditor.widgets.add( name, def );\n\t}\n\n\t/**\n\t * Marks an element which should be transformed into an upload widget.\n\t *\n\t * @see CKEDITOR.fileTools.addUploadWidget\n\t *\n\t * @member CKEDITOR.fileTools\n\t * @param {CKEDITOR.dom.element} element Element to be marked.\n\t * @param {String} widgetName The name of the upload widget.\n\t * @param {Number} loaderId The ID of a related {@link CKEDITOR.fileTools.fileLoader}.\n\t */\n\tfunction markElement( element, widgetName, loaderId  ) {\n\t\telement.setAttributes( {\n\t\t\t'data-cke-upload-id': loaderId,\n\t\t\t'data-widget': widgetName\n\t\t} );\n\t}\n\n\t/**\n\t * Binds a notification to the {@link CKEDITOR.fileTools.fileLoader file loader} so the upload widget will use\n\t * the notification to show the status and progress.\n\t * This function uses {@link CKEDITOR.plugins.notificationAggregator}, so even if multiple files are uploading\n\t * only one notification is shown. Warnings are an exception, because they are shown in separate notifications.\n\t * This notification shows only the progress of the upload, so this method should not be used if\n\t * the {@link CKEDITOR.fileTools.fileLoader#load loader.load} method was called. It works with\n\t * {@link CKEDITOR.fileTools.fileLoader#upload upload} and {@link CKEDITOR.fileTools.fileLoader#loadAndUpload loadAndUpload}.\n\t *\n\t * @member CKEDITOR.fileTools\n\t * @param {CKEDITOR.editor} editor The editor instance.\n\t * @param {CKEDITOR.fileTools.fileLoader} loader The file loader instance.\n\t */\n\tfunction bindNotifications( editor, loader ) {\n\t\tvar aggregator,\n\t\t\ttask = null;\n\n\t\tloader.on( 'update', function() {\n\t\t\t// Value of uploadTotal is known after upload start. Task will be created when uploadTotal is present.\n\t\t\tif ( !task && loader.uploadTotal ) {\n\t\t\t\tcreateAggregator();\n\t\t\t\ttask = aggregator.createTask( { weight: loader.uploadTotal } );\n\t\t\t}\n\n\t\t\tif ( task && loader.status == 'uploading' ) {\n\t\t\t\ttask.update( loader.uploaded );\n\t\t\t}\n\t\t} );\n\n\t\tloader.on( 'uploaded', function() {\n\t\t\ttask && task.done();\n\t\t} );\n\n\t\tloader.on( 'error', function() {\n\t\t\ttask && task.cancel();\n\t\t\teditor.showNotification( loader.message, 'warning' );\n\t\t} );\n\n\t\tloader.on( 'abort', function() {\n\t\t\ttask && task.cancel();\n\t\t\teditor.showNotification( editor.lang.uploadwidget.abort, 'info' );\n\t\t} );\n\n\t\tfunction createAggregator() {\n\t\t\taggregator = editor._.uploadWidgetNotificaionAggregator;\n\n\t\t\t// Create one notification aggregator for all types of upload widgets for the editor.\n\t\t\tif ( !aggregator || aggregator.isFinished() ) {\n\t\t\t\taggregator = editor._.uploadWidgetNotificaionAggregator = new CKEDITOR.plugins.notificationAggregator(\n\t\t\t\t\teditor, editor.lang.uploadwidget.uploadMany, editor.lang.uploadwidget.uploadOne );\n\n\t\t\t\taggregator.once( 'finished', function() {\n\t\t\t\t\tvar tasks = aggregator.getTaskCount();\n\n\t\t\t\t\tif ( tasks === 0 ) {\n\t\t\t\t\t\taggregator.notification.hide();\n\t\t\t\t\t} else {\n\t\t\t\t\t\taggregator.notification.update( {\n\t\t\t\t\t\t\tmessage: tasks == 1 ?\n\t\t\t\t\t\t\t\teditor.lang.uploadwidget.doneOne :\n\t\t\t\t\t\t\t\teditor.lang.uploadwidget.doneMany.replace( '%1', tasks ),\n\t\t\t\t\t\t\ttype: 'success',\n\t\t\t\t\t\t\timportant: 1\n\t\t\t\t\t\t} );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Two plugins extend this object.\n\tif ( !CKEDITOR.fileTools ) {\n\t\tCKEDITOR.fileTools = {};\n\t}\n\n\tCKEDITOR.tools.extend( CKEDITOR.fileTools, {\n\t\taddUploadWidget: addUploadWidget,\n\t\tmarkElement: markElement,\n\t\tbindNotifications: bindNotifications\n\t} );\n} )();\n"]}